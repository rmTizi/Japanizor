@inject HttpClient Http

@if (loading)
{
    <p class="text-center">Shuffling...</p>
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
             aria-valuenow="100" aria-valuemin="0"
             aria-valuemax="100" style="width: 75%"></div>
    </div>
}
else
{
    <p class="text-center text-secondary">Word @current of @words?.Length </p>
    <WordTest Word="@session?.Current" NextWordAction="() => NextWord()"/>
}

@code {
    [Parameter]
    public string Name { get; set; }

    private bool loading = true;
    private int current = 0;
    private IEnumerator<Jword> session;
    private Jword[] words;

    protected override async Task OnParametersSetAsync()
    {
        loading = true;

        words = await Http.GetFromJsonAsync<Jword[]>($"data/{Name}.json");
        Shuffle();

        loading = false;
    }

    private void Shuffle()
    {
        //Randomizer.Randomize(words);
        session = words.AsEnumerable().GetEnumerator();
        session.MoveNext();
        current = 1;
    }

    private void NextWord()
    {
        if (session.MoveNext())
        {
            current++;
        }
        else
        {
            loading = true;
            Shuffle();
            loading = false;
        }
        this.StateHasChanged();
    }
}
