@inject HttpClient Http
@inject IJSRuntime JsRuntime

@if (loading)
{
    <p class="text-center">Shuffling...</p>
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
             aria-valuenow="100" aria-valuemin="0"
             aria-valuemax="100" style="width: 75%"></div>
    </div>
}
else
{
    <p class="text-center text-secondary">Word @current of @total </p>

    <form @onsubmit="CheckWord">
        <WordTest Word="@session?.Current" State="@state" />
        <p class="text-center">
            <input id="romajiInput" autocomplete="off" spellcheck="false"
                   placeholder=" type in romanji " @bind-value="@romaji" />
        </p>
        <p class="text-center">
            @if (state == TestState.Correct)
            {
                <button class="btn btn-success" @onclick="NextWord">Next</button>
            }
            else
            {
                <button class="btn btn-primary">Check</button>
            }
        </p>
    </form>
}

@code {
    [Parameter]
    public string Name { get; set; }

    private bool loading = true;
    private int total = 0;
    private int current = 0;
    private IEnumerator<Jword> session;
    private TestState state = TestState.Prompt;
    private string romaji = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        loading = true;

        var words = await Http.GetFromJsonAsync<Jword[]>($"data/{Name}.json");
        Randomizer.Randomize(words);
        session = words.AsEnumerable().GetEnumerator();
        session.MoveNext();
        total = words.Length;
        current = 1;

        loading = false;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            JsRuntime.InvokeAsync<string>("SetFocus", "romajiInput");
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void CheckWord()
    {
        state = romaji == session?.Current?.Romaji ? TestState.Correct : TestState.Error;
        romaji = string.Empty;
    }

    private void NextWord()
    {
        state = TestState.Prompt;
        romaji = string.Empty;
        session.MoveNext();
        current++;
    }
}
